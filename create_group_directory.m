function create_group_directory(curr_mat)
% CREATE_GROUP_DIRECTORY Create a new directory for an Anymatrix group.
%  CREATE_GROUP_DIRECTORY(CURR_MAT) creates a new directory for the matrix
%  specified by the CURR_MAT struct. The latter is generated within the
%  UPDATE_SUITESPARSE_GROUPS function.
%
%  See also UPDATE_SUITESPARSE_GROUPS.

  % Create directory.
  mkdir(curr_mat.group_dir);
  normalized_group_name = strrep(curr_mat.group_ID, '-', '_');

  % Create bridge function.
  bridge_filename = [curr_mat.group_dir filesep...
                     'anymatrix_' normalized_group_name '.m'];
  bridge_file = fopen(bridge_filename, 'w');
  fprintf(bridge_file, ['function varargout = anymatrix_'...
                        normalized_group_name...
                        '(matrix_name, varargin)\n'...
                        '  handle = str2func([''ss_'' matrix_name]);\n'...
                        '  [varargout{1:nargout}]'...
                        '= handle(varargin{1:nargin-1});\n'...
                        'end']);
  fclose(bridge_file);

  % Create 'private' and 'private/matfiles' directories.
  % mkdir([group_dir filesep 'private']);
  mkdir(curr_mat.group_matfiles_dir);

  % Create mapping functions.
  mapper_filename = [curr_mat.group_private_dir filesep...
                     'anymatrix_function_to_matrix_'...
                     normalized_group_name '.m'];
  mapper_file = fopen(mapper_filename, 'w');
  fprintf(mapper_file, ['function matrix_name = '...
                        'anymatrix_function_to_matrix_' normalized_group_name...
                        '(function_name)\n'...
                        '  matrix_name = '...
                        'extractAfter(function_name, ''ss_'');\n'...
                        'end']);
  fclose(mapper_file);

  mapper_filename = [curr_mat.group_private_dir filesep...
                     'anymatrix_matrix_to_function_'...
                     normalized_group_name '.m'];
  mapper_file = fopen(mapper_filename, 'w');
  fprintf(mapper_file, ['function function_name = '...
                        'anymatrix_matrix_to_function_' normalized_group_name...
                        '(matrix_name)\n'...
                        '  function_name = [''ss_'' matrix_name];\n'...
                        'end']);
  fclose(mapper_file);

end